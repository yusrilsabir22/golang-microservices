// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: pkg/pb/logistic.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LogisticService_CreateLogistic_FullMethodName = "/logistic.LogisticService/CreateLogistic"
	LogisticService_FindOne_FullMethodName        = "/logistic.LogisticService/FindOne"
)

// LogisticServiceClient is the client API for LogisticService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogisticServiceClient interface {
	CreateLogistic(ctx context.Context, in *CreateLogisticRequest, opts ...grpc.CallOption) (*CreateLogisticResponse, error)
	FindOne(ctx context.Context, in *FindOneRequest, opts ...grpc.CallOption) (*FindOneResponse, error)
}

type logisticServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLogisticServiceClient(cc grpc.ClientConnInterface) LogisticServiceClient {
	return &logisticServiceClient{cc}
}

func (c *logisticServiceClient) CreateLogistic(ctx context.Context, in *CreateLogisticRequest, opts ...grpc.CallOption) (*CreateLogisticResponse, error) {
	out := new(CreateLogisticResponse)
	err := c.cc.Invoke(ctx, LogisticService_CreateLogistic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticServiceClient) FindOne(ctx context.Context, in *FindOneRequest, opts ...grpc.CallOption) (*FindOneResponse, error) {
	out := new(FindOneResponse)
	err := c.cc.Invoke(ctx, LogisticService_FindOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogisticServiceServer is the server API for LogisticService service.
// All implementations must embed UnimplementedLogisticServiceServer
// for forward compatibility
type LogisticServiceServer interface {
	CreateLogistic(context.Context, *CreateLogisticRequest) (*CreateLogisticResponse, error)
	FindOne(context.Context, *FindOneRequest) (*FindOneResponse, error)
	mustEmbedUnimplementedLogisticServiceServer()
}

// UnimplementedLogisticServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLogisticServiceServer struct {
}

func (UnimplementedLogisticServiceServer) CreateLogistic(context.Context, *CreateLogisticRequest) (*CreateLogisticResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLogistic not implemented")
}
func (UnimplementedLogisticServiceServer) FindOne(context.Context, *FindOneRequest) (*FindOneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOne not implemented")
}
func (UnimplementedLogisticServiceServer) mustEmbedUnimplementedLogisticServiceServer() {}

// UnsafeLogisticServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogisticServiceServer will
// result in compilation errors.
type UnsafeLogisticServiceServer interface {
	mustEmbedUnimplementedLogisticServiceServer()
}

func RegisterLogisticServiceServer(s grpc.ServiceRegistrar, srv LogisticServiceServer) {
	s.RegisterService(&LogisticService_ServiceDesc, srv)
}

func _LogisticService_CreateLogistic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLogisticRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticServiceServer).CreateLogistic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogisticService_CreateLogistic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticServiceServer).CreateLogistic(ctx, req.(*CreateLogisticRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogisticService_FindOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticServiceServer).FindOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogisticService_FindOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticServiceServer).FindOne(ctx, req.(*FindOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LogisticService_ServiceDesc is the grpc.ServiceDesc for LogisticService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogisticService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logistic.LogisticService",
	HandlerType: (*LogisticServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLogistic",
			Handler:    _LogisticService_CreateLogistic_Handler,
		},
		{
			MethodName: "FindOne",
			Handler:    _LogisticService_FindOne_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/pb/logistic.proto",
}
